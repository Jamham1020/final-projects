/*
 * Title: Module 3 - Deck of Cards
 * Author: Angela Cheng, Denis Mulalic, 
 * Janet Pham, Ben Textor
 * Date: March 16, 2022
 */

import java.util.Scanner;
import java.util.Random;

/*
 * Purpose: Card class that is akin to module 2,
 * with some changes
 * Contains: Two members - value(char) and suit(enum), 
 * boolean - cardError, inform user that card is in an illegal state
 * and usual constructors, mutators, accessors, and toString().
 * Result(s): 
 */
public class Assig3 {
   
   public static void main(String[] args)
   {
      // Test of Card Class (Phase I)
      Card firstCard = new Card('A', Card.Suit.spades);
      Card secondCard = new Card('1', Card.Suit.diamonds);
      Card thirdCard = new Card('J', Card.Suit.clubs);

      System.out.print("Testing Card Class (Phase I): \n");
      System.out.print(firstCard.toString());
      System.out.print(secondCard.toString());
      System.out.print(thirdCard.toString());

      firstCard.set('0', Card.Suit.hearts);
      secondCard.set('Q', Card.Suit.spades);

      System.out.println();
      System.out.print(firstCard.toString());
      System.out.print(secondCard.toString() + "\n");
      System.out.println(thirdCard.toString());

      // Test of Card Class (Phase II)
      System.out.println();
      System.out.println();
      System.out.print("Testing Hand Class (Phase II): \n");

      // Testing Hand class
      firstCard = new Card('3', Card.Suit.clubs);
      secondCard = new Card('T', Card.Suit.clubs);
      thirdCard = new Card('9', Card.Suit.hearts);
      Hand myHand = new Hand();
      boolean notMaxCards = true;
      while(notMaxCards)
      {
         notMaxCards = myHand.takeCard(firstCard);
         if(notMaxCards) {
            notMaxCards = myHand.takeCard(secondCard);
            if(notMaxCards) {
               notMaxCards = myHand.takeCard(thirdCard);
            }
         }
      }
      System.out.println(myHand.toString());
      
      
      System.out.println("\nTesting inspectCard()");
 
      Card playedCard;
      do{
         playedCard = myHand.playCard();
         if(playedCard.cardError == false)
            System.out.println("Playing " + playedCard.toString());
      } while(playedCard.cardError == false);
      
      System.out.println(myHand.toString());
      
      // Test of Card Class (Phase III)
      System.out.println();
      System.out.println();
      System.out.print("Testing Deck Class (Phase III): \n");
      Deck deckOne = new Deck(2);
      Card tempCard;
      
      do{
         tempCard = deckOne.dealCard();
         if(tempCard.cardError == false)
            System.out.print(tempCard.toString() + " / ");
      } while(tempCard.cardError == false);
      
      deckOne = new Deck(2);
      deckOne.shuffle();
      
      System.out.println();
      
      do{
         tempCard = deckOne.dealCard();
         if(tempCard.cardError == false)
            System.out.print(tempCard.toString() + " / ");
      } while(tempCard.cardError == false);
      
      System.out.println();
      deckOne = new Deck(1);
      
      do{
         tempCard = deckOne.dealCard();
         if(tempCard.cardError == false)
            System.out.print(tempCard.toString() + " / ");
      } while(tempCard.cardError == false);
      
      System.out.println();
      deckOne = new Deck(1);
      deckOne.shuffle();
      
      do{
         tempCard = deckOne.dealCard();
         if(tempCard.cardError == false)
            System.out.print(tempCard.toString() + " / ");
      } while(tempCard.cardError == false);
      
      System.out.println();
      System.out.println("Press any key to continue . . .");
      Scanner enter = new Scanner(System.in);
      enter.nextLine();
      
      // Test of Card Class (Phase IV)
      System.out.print("\n\n");
      System.out.print("Testing Phase IV: \n");
      
      Scanner player = new Scanner(System.in);
      // int maxPlayer = player.nextInt();
      int hands;
      
      while(true)
      {
         System.out.print("How many hands? (1 - 10, please): ");
         hands = player.nextInt();
         if(hands > 0 && hands <= 10);
           break;        
      }
      Deck gameDeck = new Deck(1);
      Hand[] playerHand = new Hand[hands];
      
      for(int i = 0; i < hands; i++)
      {
         playerHand[i] = new Hand();
      }
      
      int index = 0;
      do{
            tempCard = gameDeck.dealCard();
            if(tempCard.cardError == false)
            {
                  if(index >= hands)
                     index = 0;
                  playerHand[index].takeCard(tempCard);
                  index ++;
            }
         } while(tempCard.cardError == false);
   
      System.out.println("Here are our hands, from unshuffled deck: ");
      for(int i = 0; i < hands; i++)
      {
         System.out.println(playerHand[i].toString());
      }
      
      gameDeck = new Deck(1);
      gameDeck.shuffle();
      
      for(int i = 0; i < hands; i++)
      {
         playerHand[i] = new Hand();
      }
      
      System.out.println("Here are our hands, from shuffled deck: ");
      index = 0;
      do{
            tempCard = gameDeck.dealCard();
            if(tempCard.cardError == false)
            {
                  if(index >= hands)
                     index = 0;
                  playerHand[index].takeCard(tempCard);
                  index ++;
            }
         } while(tempCard.cardError == false);
   
      for(int i = 0; i < hands; i++)
      {
         System.out.println(playerHand[i].toString());
      }
   }
}

/*
 * A class like the one presented in the modules, but with a few changes.
 */
class Card{
   //public enum
   public enum Suit { clubs, diamonds, hearts, spades };
   //private member
   private char value;
   private Suit suit;
   // FIXME: Used in Hand class (set to public for now)
   public boolean cardError;

   // Default constructor sets a card to 'A' and 'spades'
   public Card()
   {
      set('A', Card.Suit.spades);
   }
   
   // Card class constructor
   public Card(char value, Suit suit)
   {
      set(value, suit);
   }

   //copy constructor - create duplicate of the original
   // FIXME: This needs to create a copy of origCard and not be a reference.
   public Card(Card origCard){
      char defaultValue = 'A';
      Suit defaultSuit = Suit.spades;
      set(defaultValue, defaultSuit);
   }

   /*
    * Purpose: use to display the card
    * Result(s): If cardError is true return a statement that reflects
    * the fact, like its " [invalid] "
    */
   public String toString()
   {
      if(this.cardError == true)
         return "** illegal **";
      else
         return getValue() + " of " + getSuit();

   }

   public boolean set(char value, Suit suit)
   {
      if(isValid(value, suit))
      {
         this.value = value;
         this.suit = suit;
         cardError = false;
         return true;
      }
      else 
      {
         cardError = true;
         return false; 
      }
   }

   //Accessor method for value
   public char getValue()
   {
      return this.value;
   }

   // Accessor method for suit
   public Suit getSuit()
   {
      return this.suit;
   }

   // Accessor method for cardError value
   public boolean getCardError()
   {
      return this.cardError;
   }

   // Boolean check for all members*
   public boolean equals(Card card){
      if(this.value == card.value && this.suit == card.suit)
      {
         return true;
      }
      else
      {
         return false;
      }
   }

   /*
    * Purpose: private helper method that returns true or 
    * false, depending on the parameters
    */
   private boolean isValid(char value, Suit suit)
   {
      switch(value)
      {
      case 'A':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case 'T':
      case 'J':
      case 'Q':
      case 'K':
         break;
      default:
         return false;
      }
      
      switch(suit)
      {
         case clubs:
         case diamonds:
         case hearts:
         case spades:
            return true;
         default:
            return false;
      }
   }
}

/*
 * A class that represents the cards held by a single player.
 */
class Hand
{
   public int MAX_CARDS = 100; 
   Card[] myCards;
   int numCards = 0;

   // Default constructor for the hand class
   public Hand()
   {
      myCards = new Card[MAX_CARDS];
   }
   
   // Removes by setting myCard array to null
   public void resetHand()
   {
      myCards = null;
   }
   
   /*
    * Takes as argument a card and adds it to the myCards array
    * and tests for capacity
    */
   public boolean takeCard(Card card)
   {
      if(card.cardError == false && numCards < MAX_CARDS)
      {
         myCards[numCards]= new Card(card.getValue(), card.getSuit());
         numCards++;
         return true;
      } else {
         return false;
      }
   }
   
   /*
    * Outputs a card in the array and replaces its spot in the array
    * with an invalid card
    */
   public Card playCard()
   {
      Card returnCard = new Card();
      if(numCards >= 1)
      {
         returnCard = myCards[numCards - 1];
         numCards--;
         return returnCard;
      }
      else 
      {
         // Return a "bad" card
         returnCard.set('x', Card.Suit.spades);
         return returnCard;
      }
   }
   
   //Saves the entire hand to a string and returns it
   public String toString()
   {
      String handString = "Hand = ( "; 
      for(int k = numCards - 1; k >= 0; k--)
      {
         if(myCards[k].cardError != true)
         {
            handString = handString + myCards[k].toString() + ", ";
         }
      }
      handString = handString+ " )";
      return handString;
   }
   
   //Returns the current number of cards in the array
   public int getNumCards()
   {
      return this.numCards;
   }
   
   //Returns a specific card from the array, or an invalid card if 
   //index is bad
   public Card inspectCard(int k)
   {
      if(k > numCards)
      {
         return new Card('a', Card.Suit.spades);
      }
      else 
      {
         return myCards[k];
      }    
   }
}

/*
 * A class that represents the source of the cards for dealing 
 * and, as the game progresses, the place from which players 
 * can receive new cards (say, as they pick cards "from the 
 * deck" or when future hands are to be dealt from the same deck). 
 */
class Deck 
{
   public final int MAX_CARDS = 6 * 52;  //A maximum of six packs
   private static Card[] masterPack = new Card[52]; 
   private Card[] cards; 
   private int topCard = 0;
   private static boolean initDeck = false;

   // Constructor
   public Deck()
   {
      allocateMasterPack();
      init (1);
      cards = masterPack;
   }
   
   //Constructors
   public Deck( int numPacks)
   {
      allocateMasterPack();
      init (numPacks);
   }

   //Re-populates the cards[] with new cards 
   public void init( int numPacks)
   {
      cards = new Card[numPacks * 52];
      for(int i = 0, j = 0; i <= (numPacks * 52) - 1; i++, j++)
      {
         if(j > 51)
            j = 0;
         cards[i] = masterPack[j];
         topCard++;
      }
   }

   //Shuffles the cards[] by iteraing and placing card in each index randomly 
   public void shuffle()
   {
      Card tempCard;
      Random rand = new Random();
      int firstCard;
      int secondCard;

      for(int i = 0; i < 1000; i++)
      {
         firstCard = rand.nextInt(topCard);
         secondCard = rand.nextInt(topCard);
         tempCard = cards[firstCard];
         cards[firstCard] = cards[secondCard];
         cards[secondCard] = tempCard;
      }
//      int num;
//      Card tempCard;
//      
//      // FIXME
//      for (int cardNum = 0 ; cardNum < cards.length ; cardNum++)
//      {
//         num = rand.nextInt(52); 
//         tempCard = cards[num];
//         cards[num] = cards[cardNum]; 
//         cards[cardNum] = tempCard; 
//      }

   }

   //Returns and removes the card in the top occupied position of cards[]
   public Card dealCard() 
   {
      Card dealtCard = new Card();
      if (topCard >= 1)
      {
      dealtCard = cards[topCard -1];
      topCard--;
      return cards[topCard];
      }
      dealtCard.set('x', Card.Suit.clubs);
      return  dealtCard;
   }
      
//      if ( topCard == cards.length )
//      {
//         return null;
//      }
//      
//      int temp = topCard; 
//      topCard += 1; 
//      return cards[temp];  
//   }
//
//   //Accessor for the int, topCard
//   public int getTopCard()
//   {
//      return topCard; 

   
   //Accessor for individual card 
   public Card inspectCard( int k )
   {
      Card card = new Card();
      card = cards[k];
      return card;
   }

   //Private method that will be called by the constructor
   private static void allocateMasterPack()
   {
      if (! initDeck)
      {
         int cardNum = 0;
         char[] cardVal = {'A','2','3','4','5','6','7','8','9','T','J','Q','K'};
         for( char value: cardVal)
         {
            for(Card.Suit suit: Card.Suit.values()) {
            masterPack[cardNum] = new Card(value, suit);
            cardNum++;
            }
         }
         initDeck = true;
      }
   }
}



/************************************************* Output 1 - Phase 3 ******************************************************************

Testing Deck Class (Phase III): 
K of spades / K of hearts / K of diamonds / K of clubs / Q of spades / Q of hearts / Q of diamonds / Q of clubs /
J of spades / J of hearts / J of diamonds / J of clubs / T of spades / T of hearts / T of diamonds / T of clubs / 
9 of spades / 9 of hearts / 9 of diamonds / 9 of clubs / 8 of spades / 8 of hearts / 8 of diamonds / 8 of clubs / 
7 of spades / 7 of hearts / 7 of diamonds / 7 of clubs / 6 of spades / 6 of hearts / 6 of diamonds / 6 of clubs / 
5 of spades / 5 of hearts / 5 of diamonds / 5 of clubs / 4 of spades / 4 of hearts / 4 of diamonds / 4 of clubs / 
3 of spades / 3 of hearts / 3 of diamonds / 3 of clubs / 2 of spades / 2 of hearts / 2 of diamonds / 2 of clubs / 
A of spades / A of hearts / A of diamonds / A of clubs / K of spades / K of hearts / K of diamonds / K of clubs / 
Q of spades / Q of hearts / Q of diamonds / Q of clubs / J of spades / J of hearts / J of diamonds / J of clubs / 
T of spades / T of hearts / T of diamonds / T of clubs / 9 of spades / 9 of hearts / 9 of diamonds / 9 of clubs / 
8 of spades / 8 of hearts / 8 of diamonds / 8 of clubs / 7 of spades / 7 of hearts / 7 of diamonds / 7 of clubs / 
6 of spades / 6 of hearts / 6 of diamonds / 6 of clubs / 5 of spades / 5 of hearts / 5 of diamonds / 5 of clubs / 
4 of spades / 4 of hearts / 4 of diamonds / 4 of clubs / 3 of spades / 3 of hearts / 3 of diamonds / 3 of clubs / 
2 of spades / 2 of hearts / 2 of diamonds / 2 of clubs / A of spades / A of hearts / A of diamonds / A of clubs / 
3 of hearts / Q of diamonds / A of hearts / Q of clubs / 3 of spades / 8 of clubs / A of spades / 8 of clubs / 
9 of hearts / K of clubs / 6 of hearts / A of hearts / 7 of hearts / K of diamonds / 4 of diamonds / 8 of hearts /
7 of diamonds / Q of spades / 8 of diamonds / 2 of clubs / 7 of clubs / 6 of clubs / J of hearts / K of hearts / 
3 of spades / 3 of clubs / 9 of spades / A of diamonds / Q of diamonds / 2 of clubs / 2 of hearts / K of clubs / 
2 of hearts / T of clubs / Q of hearts / 5 of clubs / 5 of hearts / 9 of clubs / T of spades / 3 of diamonds / 
4 of spades / 2 of diamonds / 4 of hearts / 8 of diamonds / 4 of clubs / 8 of spades / 3 of clubs / K of spades /
5 of spades / Q of hearts / K of diamonds / K of spades / J of spades / 6 of spades / 7 of spades / 5 of diamonds /
4 of diamonds / 9 of clubs / 2 of spades / 4 of hearts / A of spades / T of hearts / 7 of clubs / Q of clubs /
3 of hearts / J of hearts / 8 of spades / 4 of spades / 6 of diamonds / 2 of diamonds / 7 of hearts / 5 of diamonds / 
2 of spades / 6 of clubs / Q of spades / J of spades / 8 of hearts / 9 of diamonds / T of hearts / K of hearts / 
3 of diamonds / T of clubs / T of spades / 5 of clubs / 7 of spades / 6 of hearts / J of clubs / 6 of spades / 
6 of diamonds / A of clubs / 9 of diamonds / A of diamonds / 5 of spades / 4 of clubs / J of clubs / 7 of diamonds /
A of clubs / T of diamonds / 9 of spades / T of diamonds / J of diamonds / 9 of hearts / J of diamonds / 5 of hearts / 
K of spades / K of hearts / K of diamonds / K of clubs / Q of spades / Q of hearts / Q of diamonds / Q of clubs /
J of spades / J of hearts / J of diamonds / J of clubs / T of spades / T of hearts / T of diamonds / T of clubs /
9 of spades / 9 of hearts / 9 of diamonds / 9 of clubs / 8 of spades / 8 of hearts / 8 of diamonds / 8 of clubs /
7 of spades / 7 of hearts / 7 of diamonds / 7 of clubs / 6 of spades / 6 of hearts / 6 of diamonds / 6 of clubs /
5 of spades / 5 of hearts / 5 of diamonds / 5 of clubs / 4 of spades / 4 of hearts / 4 of diamonds / 4 of clubs /
3 of spades / 3 of hearts / 3 of diamonds / 3 of clubs / 2 of spades / 2 of hearts / 2 of diamonds / 2 of clubs /
A of spades / A of hearts / A of diamonds / A of clubs / 4 of spades / 5 of diamonds / 3 of diamonds / T of spades /
2 of diamonds / 6 of hearts / 6 of clubs / 8 of hearts / 7 of clubs / 9 of hearts / Q of hearts / J of clubs /
9 of spades / A of spades / 2 of clubs / 6 of diamonds / K of spades / T of clubs / 7 of spades / 5 of clubs /
K of diamonds / Q of clubs / A of diamonds / T of hearts / J of diamonds / 5 of hearts / T of diamonds / 9 of clubs /
Q of spades / 2 of spades / 4 of diamonds / Q of diamonds / 4 of hearts / J of spades / 3 of spades / 3 of clubs /
5 of spades / 6 of spades / 4 of clubs / J of hearts / K of hearts / 8 of diamonds / 8 of clubs / 7 of diamonds /
8 of spades / A of clubs / 9 of diamonds / 2 of hearts / K of clubs / 3 of hearts / A of hearts / 7 of hearts / 
Press any key to continue . . .

 ****************************************************************************************************************************************/


/******************************************************* Output 2 - Phase 4 *************************************************************

Testing Phase IV: 
How many hands? (1 - 10, please): 5
Here are our hands, from unshuffled deck: 
Hand = ( A of diamonds, 2 of hearts, 3 of spades, 5 of clubs, 6 of diamonds, 7 of hearts, 8 of spades, T of clubs, J of diamonds, Q of hearts, K of spades,  )
Hand = ( A of clubs, 2 of diamonds, 3 of hearts, 4 of spades, 6 of clubs, 7 of diamonds, 8 of hearts, 9 of spades, J of clubs, Q of diamonds, K of hearts,  )
Hand = ( 2 of clubs, 3 of diamonds, 4 of hearts, 5 of spades, 7 of clubs, 8 of diamonds, 9 of hearts, T of spades, Q of clubs, K of diamonds,  )
Hand = ( A of spades, 3 of clubs, 4 of diamonds, 5 of hearts, 6 of spades, 8 of clubs, 9 of diamonds, T of hearts, J of spades, K of clubs,  )
Hand = ( A of hearts, 2 of spades, 4 of clubs, 5 of diamonds, 6 of hearts, 7 of spades, 9 of clubs, T of diamonds, J of hearts, Q of spades,  )
Here are our hands, from shuffled deck: 
Hand = ( 3 of clubs, T of diamonds, K of spades, 4 of hearts, 2 of diamonds, 9 of spades, 4 of diamonds, 3 of spades, 2 of hearts, Q of spades, A of diamonds,  )
Hand = ( Q of clubs, J of diamonds, K of hearts, 5 of diamonds, 7 of spades, T of clubs, 3 of hearts, T of hearts, K of clubs, 6 of diamonds, 9 of hearts,  )
Hand = ( 8 of hearts, 7 of hearts, 5 of hearts, J of hearts, 7 of clubs, A of hearts, 9 of diamonds, 6 of clubs, J of clubs, 8 of spades,  )
Hand = ( 5 of clubs, 9 of clubs, K of diamonds, 7 of diamonds, 4 of clubs, A of spades, 2 of spades, Q of hearts, A of clubs, 8 of clubs,  )
Hand = ( 8 of diamonds, 5 of spades, 6 of spades, 3 of diamonds, 4 of spades, Q of diamonds, 2 of clubs, 6 of hearts, J of spades, T of spades,  )


 ****************************************************************************************************************************************/





